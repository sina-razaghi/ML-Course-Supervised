# -*- coding: utf-8 -*-
"""tamrin 2 ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I0F5-GFhzuSnUV8JvoZuhlMPznUSHlah
"""

!gdown --id 1shBZAw8s7b2jse4rmD8RhJ1WF-5zxfB7
import numpy as np 
import pandas as pd 


column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']
df = pd.read_csv('/content/housing.csv', header=None, delimiter=r"\s+", names=column_names)


X = df.iloc[:, 0:13].values
y = df.iloc[:, 13:14].values
print(df.head(5))
print(X[0], y[0])

# Dimension of the dataset
print(np.shape(df))

print(df.describe())

from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import Pipeline
from sklearn.model_selection import cross_val_score
def fit_poly(X, y, degree=1):
    
    # add polynomial features
    polynomial_features = PolynomialFeatures(degree=degree)
    
    # create and fit the model
    linear_regression = LinearRegression()
    model = Pipeline([("polynomial_features", polynomial_features), ("linear_regression", linear_regression)])
    model.fit(X, y)
    return model

degrees = [1, 2, 3, 4]

for d in degrees:
    model = fit_poly(X, y, degree=d)
    scores = cross_val_score(model,X, y, scoring="neg_mean_squared_error", cv=100)
    print(-scores.mean())

import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression, Ridge, Lasso

def fit_poly_L2_reg(degree=1, lmbda=1.0):
    # add polynomial features
    polynomial_features = PolynomialFeatures(degree=degree, include_bias=False)
    
    # create and fit the model
    linear_regression = Ridge(alpha=lmbda)
    model = Pipeline([("polynomial_features", polynomial_features), ("linear_regression", linear_regression)])
    model.fit(X, y)
    return model

import warnings
warnings.filterwarnings("ignore")
lmbda = 0.1

for d in degrees:
    model = fit_poly_L2_reg(degree=d, lmbda=lmbda)
    scores = cross_val_score(model, X, y, scoring="neg_mean_squared_error", cv=100)
    print(-scores.mean())

lmbdas = [1e-30, 1e-9, 1e-4, 1e-2, 1e-1, 1, 10, 100]

d = 3
for lmbda in lmbdas:
    model = fit_poly_L2_reg(degree=d, lmbda=lmbda)
    scores = cross_val_score(model, X, y, scoring="neg_mean_squared_error", cv=100)
    print(lmbda,"-------------->", -scores.mean())